/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const MapLazyImport = createFileRoute('/map')()
const IndexLazyImport = createFileRoute('/')()
const TasksTidLazyImport = createFileRoute('/tasks/$tid')()

// Create/Update Routes

const MapLazyRoute = MapLazyImport.update({
  path: '/map',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/map.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TasksTidLazyRoute = TasksTidLazyImport.update({
  path: '/tasks/$tid',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tasks.$tid.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapLazyImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$tid': {
      id: '/tasks/$tid'
      path: '/tasks/$tid'
      fullPath: '/tasks/$tid'
      preLoaderRoute: typeof TasksTidLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/map': typeof MapLazyRoute
  '/tasks/$tid': typeof TasksTidLazyRoute
}

interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/map': typeof MapLazyRoute
  '/tasks/$tid': typeof TasksTidLazyRoute
}

interface FileRoutesById {
  '/': typeof IndexLazyRoute
  '/map': typeof MapLazyRoute
  '/tasks/$tid': typeof TasksTidLazyRoute
}

interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/map' | '/tasks/$tid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/map' | '/tasks/$tid'
  id: '/' | '/map' | '/tasks/$tid'
  fileRoutesById: FileRoutesById
}

interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MapLazyRoute: typeof MapLazyRoute
  TasksTidLazyRoute: typeof TasksTidLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MapLazyRoute: MapLazyRoute,
  TasksTidLazyRoute: TasksTidLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/map",
        "/tasks/$tid"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/map": {
      "filePath": "map.lazy.tsx"
    },
    "/tasks/$tid": {
      "filePath": "tasks.$tid.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
